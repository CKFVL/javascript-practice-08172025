TODO: https://courses.supersimple.dev/courses/html-css

<!DOCTYPE html> // tells browser to use modern version of html
<html>
  <head> // contents in the head section won't be visible e.g. styles
    <title>Buttons</title> // displayed in browser tab
    <style>
      .add-to-cart-button { // . means selecting the class
        background-color: yellow;
      }

      .buy-now-button {
        background-color: orange;
      }
    </style>
  </head>
  <body>
    <p>Adults Plain Cotton T-shirt</p>
    <p>Price: $7.99</p>

    <!-- I added some extra spaces to make the code
    easier to read. -->
    <button class="add-to-cart-button" onclick="
      alert('Added');
    ">Add to cart</button>

    <button class="buy-now-button" onclick="
      console.log('Loading...');
      alert('Purchased');
    ">Buy now</button>

<script> // run javascript code
      console.log('Welcome!');
    </script>
  </body>


</html>

###########################
A block element takes up an entire line itself
e.g., <p>, <div>

<div> doesn't apply any styling while <p> adds an extra space above and below it.

the <p> (paragraph) tag in HTML is a block-level element.
That means:
It starts on a new line in the browser.
It takes up the full available width (stretching out as far as it can horizontally).
Any elements that come after it will automatically appear on a new line below the paragraph (unless styled otherwise with CSS).
Other common block elements include <div>, <h1>–<h6>, <ul>, <table>, etc.
###########################
<br>
break is empty and no closing tag is required
###########################
To link another css file in a html, use
<link rel="stylesheet" href="styles/<file-path> >

we can use multiple stylesheets using multiple link elements
###########################
To link another javascript file in a html, use
<script src="<file-path>"></script>

we can use multiple javascript files using multiple script elements
###########################
anchor tag (with target attribute)
###########################
<div>
###########################
id selector: #<id-of-html-element>
class selector:

###########################
<img src="src/assets/<image_file_name.png>" alt="<this text is displayed if image is not loaded>"/>

###########################
section tag:
When breaking up a page into distinct parts.

import reactImg from "./assets/react-core-concepts.png"
import componentsImg from "./assets/components.png"
// custom component should start with uppercase
function Header(){
  // return is mandatory
  return <header> 
    {/* In React (and other modern JS bundlers), the src attribute in HTML doesn’t resolve local files the way it does in plain HTML

    React (or tools like Vite) don't serve files in src/ as-is. They need to be:
      Imported, (  Use import and reference the image variable (Best for React components)) OR
      Put into the public/ folder
        Use public/ folder (for static assets)
        Move your image to the public/ folder (not src/), then reference it with a relative path from the root:
    .*/}

    {/* <img src="src/assets/react-core-concepts.png" alt="Stylized atom"/> */}
    <img src={reactImg} alt="Stylized atom"/>
    <h1>My React Essentials</h1>
    <p>
       Fundamental React concepts you will need for almost any app you are
          going to build!
    </p>
    
  </header>
}

function CoreConcept(props){
  return (
  <li>
    <img src={props.img} alt={props.description}/>
    <h3>{props.title}</h3>
    <p>{props.description}</p>
  </li>);
}

function App() {
  return (
    <div>
      <Header/>
      <main>
        <section id="core-concepts">
        <h2>Core Concepts</h2>
        <ul>
          <CoreConcept title="Component1" description="first concept" img={componentsImg}/>
          <CoreConcept title="Component2" description="second concept" img={componentsImg}/>
          <CoreConcept title="Component3" description="third concept" img={componentsImg}/>
          <CoreConcept title="Component4" description="fourth concept" img={componentsImg}/>
        </ul>
        </section>
      </main>
    </div>
  );
}

export default App;

